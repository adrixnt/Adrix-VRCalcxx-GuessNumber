
	// system startup init
	$loadmodule (
		$getenvvarvalue ("AxVRCalcxxSystemStartUpInitBaseFolder") +
		"/StartUpInitModules/VRSystemStartUpInit.vrcm"
	),

	@to PrintNumbersOnStdOut (aNumbers) static
	{
		@VRStd.Out << "[ ",
		@for (aValue : aNumbers) {
			@VRStd.Out << aValue << " "
		},
		@VRStd.Out << "]"
	},


	@to PlayGame (aMaxValue) static
	{
		aRnd = @new (@VRMath.Random).Initialize(),
		aRnd.Randomize(),

		aNumberToGuess = aRnd.RandomRange (0, aMaxValue + 1),

		aMaxNumOfTries = @VRIntMath.Utils.IntLog (aMaxValue, 2) + 1,

		aNumbers = @array(),

		aTryCount = 0,

		@repeat {

			@if (aTryCount >= aMaxNumOfTries) { @break },

			@VRStd.Out << "prev: ", @thisclass.PrintNumbersOnStdOut (aNumbers), @VRStd.Out << @VRStd.EndL,

			@VRStd.Out << "you have " << (aMaxNumOfTries - aTryCount) << " tries left" << @std.endl,

			@VRStd.Out << "try #" << aTryCount + 1 << @std.endl,

			@VRStd.Out << "enter a number in the range [" << 0 << " .. " << aMaxValue << "]: ",
			aStr = @VRStd.In.ReadStringLine(),
			aNumber = @String.Parse.AsInt (aStr),

			@IIContainer.AddItemTo (aNumbers, aNumber),

			@switch
			if (aNumber < aNumberToGuess) {

				@VRStd.Out << "retry, the number to guess is > than " << aNumber << @std.endl,

			}
			else
			if (aNumber > aNumberToGuess) {

				@VRStd.Out << "retry, the number to guess is < than " << aNumber << @std.endl,

			}
			else {

				@VRStd.Out << "ok (" << aNumberToGuess << " == " << aNumber << ")" << @std.endl,
				@VRStd.Out << "you win !!!" << @std.endl,

				@return

			},

			++ aTryCount
		},

		@VRStd.Out << "the Number to Guess was (" << aNumberToGuess << ")" << @std.endl,
		@VRStd.Out << "sorry, you loose !!" << @std.endl,
	},


	@proc Main() static
	{
		// load all VR Sys Std RTLib
		@System.LoadModulesFromFolderTree (
			@System.GetEnvVarValue("AxVRCalcxxSysStdScriptedRTLibBaseFolder") + "/Library/*.vrcm"
		),

		@VRStd.Out << "Guess a Number" << @std.endl,

		@VRStd.Out << "enter max value: ",
		aStr = @VRStd.In.ReadStringLine(),
		aMaxValue = @String.Parse.AsInt (aStr),

		@VRStd.Out << "Guess a Number in the range [" << 0 << " .. " << aMaxValue << "]" << @std.endl,

		@thisclass.PlayGame (aMaxValue)
	},

	@thisclass.Main(),
	""
